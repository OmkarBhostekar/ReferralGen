// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: templates.sql

package referralgen

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const createTemplate = `-- name: CreateTemplate :one
INSERT INTO templates(
    user_id,
    name,
    template,
    params
) VALUES (
    $1,
    $2,
    $3,
    $4
) RETURNING id, user_id, name, template, params, created_at
`

type CreateTemplateParams struct {
	UserID   int64          `json:"user_id"`
	Name     sql.NullString `json:"name"`
	Template sql.NullString `json:"template"`
	Params   []string       `json:"params"`
}

func (q *Queries) CreateTemplate(ctx context.Context, arg CreateTemplateParams) (Template, error) {
	row := q.db.QueryRowContext(ctx, createTemplate,
		arg.UserID,
		arg.Name,
		arg.Template,
		pq.Array(arg.Params),
	)
	var i Template
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Template,
		pq.Array(&i.Params),
		&i.CreatedAt,
	)
	return i, err
}

const deleteTemplateById = `-- name: DeleteTemplateById :one
DELETE FROM templates WHERE id = $1 RETURNING id, user_id, name, template, params, created_at
`

func (q *Queries) DeleteTemplateById(ctx context.Context, id int64) (Template, error) {
	row := q.db.QueryRowContext(ctx, deleteTemplateById, id)
	var i Template
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Template,
		pq.Array(&i.Params),
		&i.CreatedAt,
	)
	return i, err
}

const getTemplateById = `-- name: GetTemplateById :one
SELECT id, user_id, name, template, params, created_at FROM templates WHERE id = $1
`

func (q *Queries) GetTemplateById(ctx context.Context, id int64) (Template, error) {
	row := q.db.QueryRowContext(ctx, getTemplateById, id)
	var i Template
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Template,
		pq.Array(&i.Params),
		&i.CreatedAt,
	)
	return i, err
}

const getTemplateByName = `-- name: GetTemplateByName :one
SELECT id, user_id, name, template, params, created_at FROM templates WHERE user_id = $1 AND name = $2
`

type GetTemplateByNameParams struct {
	UserID int64          `json:"user_id"`
	Name   sql.NullString `json:"name"`
}

func (q *Queries) GetTemplateByName(ctx context.Context, arg GetTemplateByNameParams) (Template, error) {
	row := q.db.QueryRowContext(ctx, getTemplateByName, arg.UserID, arg.Name)
	var i Template
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Template,
		pq.Array(&i.Params),
		&i.CreatedAt,
	)
	return i, err
}

const getTemplatesByUser = `-- name: GetTemplatesByUser :many
SELECT id, user_id, name, template, params, created_at FROM templates WHERE user_id = $1
`

func (q *Queries) GetTemplatesByUser(ctx context.Context, userID int64) ([]Template, error) {
	rows, err := q.db.QueryContext(ctx, getTemplatesByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Template{}
	for rows.Next() {
		var i Template
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Template,
			pq.Array(&i.Params),
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTemplateById = `-- name: UpdateTemplateById :one
UPDATE templates SET
    name = $2,
    template = $3,
    params = $4
WHERE id = $1 RETURNING id, user_id, name, template, params, created_at
`

type UpdateTemplateByIdParams struct {
	ID       int64          `json:"id"`
	Name     sql.NullString `json:"name"`
	Template sql.NullString `json:"template"`
	Params   []string       `json:"params"`
}

func (q *Queries) UpdateTemplateById(ctx context.Context, arg UpdateTemplateByIdParams) (Template, error) {
	row := q.db.QueryRowContext(ctx, updateTemplateById,
		arg.ID,
		arg.Name,
		arg.Template,
		pq.Array(arg.Params),
	)
	var i Template
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Template,
		pq.Array(&i.Params),
		&i.CreatedAt,
	)
	return i, err
}
